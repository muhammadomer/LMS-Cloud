//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SinglePoint_CloudEntities : DbContext
    {
        public SinglePoint_CloudEntities()
            : base("name=SinglePoint_CloudEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityLog> ActivityLog { get; set; }
        public virtual DbSet<vw_GetActivityLog> vw_GetActivityLog { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Accounts> Accounts { get; set; }
    
        public virtual int CleanCloudDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanCloudDatabase");
        }
    
        public virtual int CreateCloneDatabase(string sourceDBName, string cloneDBName, string backupPath, string restorePath)
        {
            var sourceDBNameParameter = sourceDBName != null ?
                new ObjectParameter("sourceDBName", sourceDBName) :
                new ObjectParameter("sourceDBName", typeof(string));
    
            var cloneDBNameParameter = cloneDBName != null ?
                new ObjectParameter("cloneDBName", cloneDBName) :
                new ObjectParameter("cloneDBName", typeof(string));
    
            var backupPathParameter = backupPath != null ?
                new ObjectParameter("backupPath", backupPath) :
                new ObjectParameter("backupPath", typeof(string));
    
            var restorePathParameter = restorePath != null ?
                new ObjectParameter("restorePath", restorePath) :
                new ObjectParameter("restorePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCloneDatabase", sourceDBNameParameter, cloneDBNameParameter, backupPathParameter, restorePathParameter);
        }
    
        public virtual int ManageUserForClientDatabase(string companyName, string filter, string firstName, string lastName, string email, string phone, string username, string password, string profileImage, string accountId, Nullable<int> allowRiskManager, Nullable<int> allowFileRepository, Nullable<int> allowBusinessCard, Nullable<int> allowDAC6, Nullable<int> allowTrainingCourses)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var profileImageParameter = profileImage != null ?
                new ObjectParameter("ProfileImage", profileImage) :
                new ObjectParameter("ProfileImage", typeof(string));
    
            var accountIdParameter = accountId != null ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(string));
    
            var allowRiskManagerParameter = allowRiskManager.HasValue ?
                new ObjectParameter("AllowRiskManager", allowRiskManager) :
                new ObjectParameter("AllowRiskManager", typeof(int));
    
            var allowFileRepositoryParameter = allowFileRepository.HasValue ?
                new ObjectParameter("AllowFileRepository", allowFileRepository) :
                new ObjectParameter("AllowFileRepository", typeof(int));
    
            var allowBusinessCardParameter = allowBusinessCard.HasValue ?
                new ObjectParameter("AllowBusinessCard", allowBusinessCard) :
                new ObjectParameter("AllowBusinessCard", typeof(int));
    
            var allowDAC6Parameter = allowDAC6.HasValue ?
                new ObjectParameter("AllowDAC6", allowDAC6) :
                new ObjectParameter("AllowDAC6", typeof(int));
    
            var allowTrainingCoursesParameter = allowTrainingCourses.HasValue ?
                new ObjectParameter("AllowTrainingCourses", allowTrainingCourses) :
                new ObjectParameter("AllowTrainingCourses", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageUserForClientDatabase", companyNameParameter, filterParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, usernameParameter, passwordParameter, profileImageParameter, accountIdParameter, allowRiskManagerParameter, allowFileRepositoryParameter, allowBusinessCardParameter, allowDAC6Parameter, allowTrainingCoursesParameter);
        }
    }
}
